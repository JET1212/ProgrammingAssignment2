for (i in 1:332) {
dat <- data.frame()
dat <- read.csv(files_full[i])
datsubset <- subset(dat, is.na(sulfate)==FALSE, is.na(nitrate)==FALSE)
num <- nrow(datsubset)
newrow <- c(i,num)
finaldat <- rbind(finaldat,newrow)
if (newrow[[2]]>=threshold) {
newcor <- c(newcor, cor(newrow[[1]], newrow[[2]]))
append(nobsThatMeetThreshold , newcor)
}
}
nobsThatMeetThreshold
}
corr("specdata", 30)
corr <- function(directory, threshold = 0) {
        ## 'directory' is a character vector of length 1 indicating
        ## the location of the CSV files
        ## 'threshold' is a numeric vector of length 1 indicating the
        ## number of completely observed observations (on all
        ## variables) required to compute the correlation between
        ## nitrate and sulfate; the default is 0
        ## Return a numeric vector of correlations
        ## NOTE: Do not round the result!
files_full <- list.files(directory, full.names=TRUE)
finaldat <- data.frame( "id"=as.numeric(0),"nobs"=as.numeric(0))
nobsThatMeetThreshold  <- numeric()
for (i in 1:332) {
dat <- data.frame()
dat <- read.csv(files_full[i])
datsubset <- subset(dat, is.na(sulfate)==FALSE, is.na(nitrate)==FALSE)
num <- nrow(datsubset)
newrow <- c(i,num)
finaldat <- rbind(finaldat,newrow)
if (newrow[[2]]>=threshold) {
newcor <- (cor(newrow[[1]], newrow[[2]])
nobsThatMeetThreshold <- c(nobsThatMeetThreshold, newcor)
}
}
nobsThatMeetThreshold
}
corr("specdata", 30)corr <- function(directory, threshold = 0) {
        ## 'directory' is a character vector of length 1 indicating
        ## the location of the CSV files
        ## 'threshold' is a numeric vector of length 1 indicating the
        ## number of completely observed observations (on all
        ## variables) required to compute the correlation between
        ## nitrate and sulfate; the default is 0
        ## Return a numeric vector of correlations
        ## NOTE: Do not round the result!
files_full <- list.files(directory, full.names=TRUE)
finaldat <- data.frame( "id"=as.numeric(0),"nobs"=as.numeric(0))
nobsThatMeetThreshold  <- numeric()
for (i in 1:332) {
dat <- data.frame()
dat <- read.csv(files_full[i])
datsubset <- subset(dat, is.na(sulfate)==FALSE, is.na(nitrate)==FALSE)
num <- nrow(datsubset)
newrow <- c(i,num)
finaldat <- rbind(finaldat,newrow)
if (newrow[[2]]>=threshold) {
newcor <- (cor(newrow[[1]], newrow[[2]])
nobsThatMeetThreshold <- c(nobsThatMeetThreshold, newcor)
}
nobsThatMeetThreshold
}
corr("specdata", 30)
corr <- function(directory, threshold = 0) {
        ## 'directory' is a character vector of length 1 indicating
        ## the location of the CSV files
        ## 'threshold' is a numeric vector of length 1 indicating the
        ## number of completely observed observations (on all
        ## variables) required to compute the correlation between
        ## nitrate and sulfate; the default is 0
        ## Return a numeric vector of correlations
        ## NOTE: Do not round the result!
files_full <- list.files(directory, full.names=TRUE)
finaldat <- data.frame( "id"=as.numeric(0),"nobs"=as.numeric(0))
nobsThatMeetThreshold  <- numeric()
for (i in 1:332) {
dat <- data.frame()
dat <- read.csv(files_full[i])
datsubset <- subset(dat, is.na(sulfate)==FALSE, is.na(nitrate)==FALSE)
num <- nrow(datsubset)
newrow <- c(i,num)
finaldat <- rbind(finaldat,newrow)
if (newrow[[2]]>=threshold) {
newcor <- (cor(newrow[[1]], newrow[[2]])
nobsThatMeetThreshold <- c(nobsThatMeetThreshold, newcor)
}
nobsThatMeetThreshold
}
}
corr("specdata", 30)
corr <- function(directory, threshold = 0) {
        ## 'directory' is a character vector of length 1 indicating
        ## the location of the CSV files
        ## 'threshold' is a numeric vector of length 1 indicating the
        ## number of completely observed observations (on all
        ## variables) required to compute the correlation between
        ## nitrate and sulfate; the default is 0
        ## Return a numeric vector of correlations
        ## NOTE: Do not round the result!
files_full <- list.files(directory, full.names=TRUE)
finaldat <- data.frame( "id"=as.numeric(0),"nobs"=as.numeric(0))
nobsThatMeetThreshold  <- numeric()
for (i in 1:332) {
dat <- data.frame()
dat <- read.csv(files_full[i])
datsubset <- subset(dat, is.na(sulfate)==FALSE, is.na(nitrate)==FALSE)
num <- nrow(datsubset)
newrow <- c(i,num)
finaldat <- rbind(finaldat,newrow)
if (newrow[[2]]>=threshold) {
newcor <- (cor(newrow[[1]], newrow[[2]])
nobsThatMeetThreshold <- c(nobsThatMeetThreshold, newcor)
nobsThatMeetThreshold
}
}
corr("specdata", 30)corr <- function(directory, threshold = 0) {
        ## 'directory' is a character vector of length 1 indicating
        ## the location of the CSV files
        ## 'threshold' is a numeric vector of length 1 indicating the
        ## number of completely observed observations (on all
        ## variables) required to compute the correlation between
        ## nitrate and sulfate; the default is 0
        ## Return a numeric vector of correlations
        ## NOTE: Do not round the result!
files_full <- list.files(directory, full.names=TRUE)
finaldat <- data.frame( "id"=as.numeric(0),"nobs"=as.numeric(0))
nobsThatMeetThreshold  <- numeric()
for (i in 1:332) {
dat <- data.frame()
dat <- read.csv(files_full[i])
datsubset <- subset(dat, is.na(sulfate)==FALSE, is.na(nitrate)==FALSE)
num <- nrow(datsubset)
newrow <- c(i,num)
finaldat <- rbind(finaldat,newrow)
if (newrow[[2]]>=threshold) {
newcor <- (cor(newrow[[1]], newrow[[2]])
nobsThatMeetThreshold <- c(nobsThatMeetThreshold, newcor)
nobsThatMeetThreshold
}
corr("specdata", 30)corr <- function(directory, threshold = 0) {
        ## 'directory' is a character vector of length 1 indicating
        ## the location of the CSV files
        ## 'threshold' is a numeric vector of length 1 indicating the
        ## number of completely observed observations (on all
        ## variables) required to compute the correlation between
        ## nitrate and sulfate; the default is 0
        ## Return a numeric vector of correlations
        ## NOTE: Do not round the result!
files_full <- list.files(directory, full.names=TRUE)
finaldat <- data.frame( "id"=as.numeric(0),"nobs"=as.numeric(0))
nobsThatMeetThreshold  <- numeric()
for (i in 1:332) {
dat <- data.frame()
dat <- read.csv(files_full[i])
datsubset <- subset(dat, is.na(sulfate)==FALSE, is.na(nitrate)==FALSE)
num <- nrow(datsubset)
newrow <- c(i,num)
finaldat <- rbind(finaldat,newrow)
if (newrow[[2]]>=threshold) {
newcor <- (cor(newrow[[1]], newrow[[2]])
nobsThatMeetThreshold <- c(nobsThatMeetThreshold, newcor)
}
}
nobsThatMeetThreshold
}
corr("specdata", 30)
complete("specdata")
complete <- function(directory, id = 1:332) {
files_full <- list.files(directory, full.names=TRUE)
finaldat <- data.frame( "id"=as.numeric(0),"nobs"=as.numeric(0))
for (i in id) {
dat <- data.frame()
dat <- read.csv(files_full[i])
datsubset <- subset(dat, is.na(sulfate)==FALSE, is.na(nitrate)==FALSE)
num <- nrow(datsubset)
newrow <- c(i,num)
finaldat <- rbind(finaldat,newrow)
}
finaldat <- finaldat[-c(1),]   
   finaldat   
}
complete("specdata", 1:332)
complete(1:40)
corr <- function(directory, threshold = 0) {
        ## 'directory' is a character vector of length 1 indicating
        ## the location of the CSV files
        ## 'threshold' is a numeric vector of length 1 indicating the
        ## number of completely observed observations (on all
        ## variables) required to compute the correlation between
        ## nitrate and sulfate; the default is 0
        ## Return a numeric vector of correlations
        ## NOTE: Do not round the result!
files_full <- list.files(directory, full.names=TRUE)
finaldat <- data.frame( "id"=as.numeric(0),"nobs"=as.numeric(0))
nobsThatMeetThreshold  <- numeric()
for (i in 1:332) {
dat <- data.frame()
dat <- read.csv(files_full[i])
datsubset <- subset(dat, is.na(sulfate)==FALSE, is.na(nitrate)==FALSE)
num <- nrow(datsubset)
newrow <- c(i,num)
finaldat <- rbind(finaldat,newrow)
}
for (i in nrows(finaldat)) {
if (finaldat[[1]]$nobs>= threshold) {
nobsThatMeetThreshold <- c(nobsThatMeetThreshold,finaldat[[1]]$nobs) 
}
}
nobsThatMeetThreshold
}
corr("specdata", 30)
?nrow
corr <- function(directory, threshold = 0) {
        ## 'directory' is a character vector of length 1 indicating
        ## the location of the CSV files
        ## 'threshold' is a numeric vector of length 1 indicating the
        ## number of completely observed observations (on all
        ## variables) required to compute the correlation between
        ## nitrate and sulfate; the default is 0
        ## Return a numeric vector of correlations
        ## NOTE: Do not round the result!
files_full <- list.files(directory, full.names=TRUE)
finaldat <- data.frame( "id"=as.numeric(0),"nobs"=as.numeric(0))
nobsThatMeetThreshold  <- numeric()
for (i in 1:332) {
dat <- data.frame()
dat <- read.csv(files_full[i])
datsubset <- subset(dat, is.na(sulfate)==FALSE, is.na(nitrate)==FALSE)
num <- nrow(datsubset)
newrow <- c(i,num)
finaldat <- rbind(finaldat,newrow)
}
for (i in nrow(finaldat)) {
if (finaldat[[1]]$nobs>= threshold) {
nobsThatMeetThreshold <- c(nobsThatMeetThreshold,cor(dat[[i]]$sulfate, dat[[i]]$nitrate)) 
}
}
nobsThatMeetThreshold
}
corr("specdata", 30)
pollutantmean <- function(directory, pollutant, id = 1:332) {
    ## 'directory' is a character vector of length 1 indicating
    ## the location of the CSV files
    ## 'pollutant' is a character vector of length 1 indicating
    ## the name of the pollutant for which we will calculate the
    ## mean; either "sulfate" or "nitrate".
    ## 'id' is an integer vector indicating the monitor ID numbers
    ## to be used
    ## Return the mean of the pollutant across all monitors list
    ## in the 'id' vector (ignoring NA values)
files_full <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_full[i]))
}
if (pollutant=="sulfate") {
datmean <- mean(dat$sulfate, na.rm=TRUE)
} 
if (pollutant=="nitrate") {
datmean <- mean(dat$nitrate, na.rm=TRUE)
}
datmean
}
pollutantmean("specdata", "sulfate", 100:200)
complete <- function(directory, id = 1:332) {
files_full <- list.files(directory, full.names=TRUE)
finaldat <- data.frame( "id"=as.numeric(0),"nobs"=as.numeric(0))
for (i in id) {
dat <- data.frame()
dat <- read.csv(files_full[i])
datsubset <- subset(dat, is.na(sulfate)==FALSE, is.na(nitrate)==FALSE)
num <- nrow(datsubset)
newrow <- c(i,num)
finaldat <- rbind(finaldat,newrow)
}
finaldat <- finaldat[-c(1),]   
   finaldat   
}
complete("specdata", 1:332)
?formatC
source("pollutantmean")
source(pollutantmean)
?source
getwd()
source("pollutantMean.R")
source("completecases.R")
source("corr.R")
source("corr.R")
source("corr.R")
source("corr.R")
source("corr.R")
source("corr.R")
corr("specdata", 5)
source("corr.R")
corr("specdata", 5)
source("corr.R")
corr("specdata", 5)
corr("specdata", 100)
corr("specdata", 300)
corr("specdata", 2,5,6,7,8)
corr("specdata", 800)
head(corr("specdata", 800))
summary(corr("specdata", 800))
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
5
submit()
5
submit()
complete("specdata", c(2, 4, 8, 10, 12))
submit()
source("complete.R")
complete("specdata")
complete("specdata", 100:300)
complete("specdata", c(2, 4, 8, 10, 12))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
cube <- function(x, n) {
        x^3
}
cube(3)
x <- 1:10
if(x > 5) {
        x <- 0
}
Sys.time()
Sys.time() <- as.POSIXlt
as.POSIXlt(Sys.time())
as.POSIXlt(Sys.time())[1]
as.POSIXlt(Sys.time())[1][[1]]
f <- function(x) {
        g <- function(y) {
                y + z
        }
        z <- 4
        x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
        NA
} else {
        10
}
y
L <-4
3L
3*L
3L<-5
3L
x <- 5
y <- if(x < 3) {
        NA
} else {
        10
}
y
f <- function(x) {
        g <- function(y) {
                y + z
        }
        z <- 4
        x + g(x)
}
z<-10
f(3)
f <- function(x) {
        g <- function(y) {
                y + z
        }
        z <- 4
        x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
        NA
} else {
        10
}
y
makeVector <- function(x = numeric()) {
        m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setmean <- function(mean) m <<- mean
        getmean <- function() m
        list(set = set, get = get,
             setmean = setmean,
             getmean = getmean)
}
makeVector(9)
cachemean <- function(x, ...) {
        m <- x$getmean()
        if(!is.null(m)) {
                message("getting cached data")
                return(m)
        }
        data <- x$get()
        m <- mean(data, ...)
        x$setmean(m)
        m
}
cachemean(8)
cachemean(8, 6)
makeCacheMatrix <- function(x = matrix()) {
    inv <- NULL
    set <- function(y) {
        x <<- y
        inv <<- NULL
    }
    get <- function() x
    setinverse <- function(inverse) inv <<- inverse
    getinverse <- function() inv
    list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
makeCacheMatrix(9)
source("makeCacheMatrix")
getwd()
source("makeCacheMatrix.R")
makeCacheMatrix(9)
?<<-
?<-
w <- 4
w
t <<- w
w <- (1:5)
w
t <<- w
?"<<-"
a <- numeric()
a
display <- function() a
display
display <- function() a= matrix()
display
?function()
?function
?"function()"
?function
help("function")
help(function)
? function
?function
?"<-"
?inverse
??inverse
?function()
a
source("makeCacheMatrix.R")
makeCacheMatrix(2)
makeCacheMatrix(10)
makeCacheMatrix <- function(x = matrix()) {
    inv_x <- NULL
    set <- function(y) {
        x <<- y
        inv_x <<- NULL
    }
    get <- function() x
    setinverse<- function(inverse) inv_x <<-inverse
    getinverse <- function() inv_x
    list(set = set, get = get,
         setinverse = setinverse,
         getinverse = getinverse)
}
makeCacheMatrix()
source("cacheSolve.R")
cacheSolve(9)
source("makeCacheMatrix.R")
makeCacheMatrix(4)
cacheSolve(4)
?"..."
?solve
?"%*%"
log(-1)
message("hello")
print("hello")
x<- 9
print(x)
message(x)
cacheSolve()
cachceSolve(makeCacheMatrix(9))
cacheSolve(makeCacheMatrix(9))
setwd("C:\Users\507192\Documents\R\ProgrammingAssignment2")
setwd("ProgrammingAssignment2")
getwd()
source("cacheMatrix.R")
source("cacheMatrix.R")
cacheSolve(makeCacheMatrix(9))
source("cacheMatrix.R")
cacheSolve(makeCacheMatrix(9))
cacheSolve(makeCacheMatrix(30))
source("cacheMatrix.R")
source("cacheMatrix.R")
cacheSolve(makeCacheMatrix(30))
q()
